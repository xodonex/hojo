// Copyright 1998,1999,2000,2001,2018, Henrik Lauritzen.
/*
    This file is part of the Hojo interpreter & toolkit.

    The Hojo interpreter & toolkit is free software: you can redistribute it
    and/or modify it under the terms of the GNU Affero General Public License
    as published by the Free Software Foundation, either version 3 of the
    License, or (at your option) any later version.

    The Hojo interpreter & toolkit is distributed in the hope that it will
    be useful or (at least have historical interest),
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
    See the GNU Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with this file.  If not, see <http://www.gnu.org/licenses/>.
*/
package org.xodonex.hojo;

import java.io.PrintWriter;
import java.io.Reader;
import java.io.Writer;
import java.net.URL;

import org.xodonex.hojo.lang.Statement;
import org.xodonex.util.text.lexer.GenericLexer;

/**
 * Notification interface for clients of a Hojo interpeter.
 */
public interface HojoObserver extends PragmaListener {

    /**
     * Invoked on the observer before the interpretation is started.
     *
     * @param in
     *            The <code>Reader</code> from which the input will be read.
     * @return <code>true</code> if the observer accepts the input. If
     *         <code>false</code> is returned, then the interpretation is
     *         aborted.
     */
    public boolean started(Reader in);

    /**
     * Invoked before the contents of a new <code>URL</code> is being included
     * by the lexer.
     *
     * @param url
     *            the <code>URL</code> which will be included
     * @return <code>true</code> iff the observer accepts the new input.
     */
    public boolean includeStart(URL url);

    /**
     * Invoked when the contents of a previously included <code>URL</code> is
     * being removed from the lexer's input.
     *
     * @param url
     *            the <code>URL</code> which is being removed. While it is
     *            guaranteed that this is the last <code>URL</code> being
     *            presented to {@link #includeStart(URL) includeStart()}, there
     *            is no guarantee that all such <code>URL</code>s will be seen
     *            by this method.
     */
    public void includeEnd(URL url);

    /**
     * Invoked every time the compiler or interpreter issues a warning.
     *
     * @param w
     *            The warning. {@link HojoException#isWarning()} will be
     *            <code>true</code>.
     */
    public void handleWarning(HojoException w);

    /**
     * Invoked every time an exception is generated by the compiler or
     * interpreter. If error recovery is required, then the compiler/interpreter
     * will subsequently issue a call to
     * {@link #doRecovery(GenericLexer.Recovery)}.
     *
     * @param e
     *            The error.
     * @return <code>false</code> iff the given error should cause the
     *         interpreter to terminate.
     */
    public boolean handleError(HojoException e);

    /**
     * Invoked by the interpreter when error recovery is needed to resynchronize
     * the input so a known state.
     *
     * @param rec
     *            A <code>HojoLexer.Recovery</code> which can be used to
     *            resynchronize the compiler's input stream.
     * @return <code>true</code> iff recovery was handled by the observer.
     *         Otherwise the interpreter will recover by skipping input until
     *         the next separator token (or EOF) has been read.
     */
    public boolean doRecovery(GenericLexer.Recovery rec);

    /**
     * Invoked by the interpreter when error recovery has been effected
     * (regardless of the return value of
     * {@link #doRecovery(GenericLexer.Recovery)}
     */
    public void recovered();

    /**
     * Invoked by the interpreter every time a non-valued command (top-level
     * statement which does not generate a value) has been successfully
     * executed.
     *
     * @see #commandResult(Object)
     */
    public void commandResult();

    /**
     * Invoked by the interpreter every time a valued command (top-level
     * statement which generates a value) has been succesfully executed.
     *
     * @param result
     *            The value generated by the command.
     * @see #commandResult()
     */
    public void commandResult(Object result);

    /**
     * Invoked by the interpreter every time a new command is being compiled.
     * The end of the compilation is indicated by the next call to
     * {@link #commandResult()}, {@link #commandResult(Object)} or
     * {@link #handleError(HojoException)}.
     */
    public void commandRead();

    /**
     * Invoked by the interpreter every time a new compiled command is to be
     * executed. The end of the execution is indicated by a call to either
     * {@link #commandResult()}, {@link #commandResult(Object)} or
     * {@link #handleError(HojoException)}.
     *
     * @param stm
     *            The code to be executed.
     * @return <code>true</code> if the command should be executed, and
     *         <code>false</code> if it should not
     */
    public boolean commandExecute(Statement stm);

    /**
     * Invoked by the interpreter every time a new OS command is to be executed
     * as the result of an interpreter command line (compiled code may start an
     * OS command, in which case {@link #commandExecute(Statement)} will be
     * called). The end of the execution is indicated by a call to either
     * {@link #commandResult()}, {@link #commandResult(Object)} or
     * {@link #handleError(HojoException)}.
     *
     * @param cmds
     *            The command line to be executed.
     * @return <code>true</code> if the command should be executed, and
     *         <code>false</code> if it should not
     */
    public boolean commandExecute(String[] cmds);

    /**
     * Invoked by the interpreter after the end of its input has been reached.
     */
    public void finished();

    /**
     * @return the writer which is used to display normal output.
     */
    public Writer getOutputWriter();

    /**
     * @return the writer which is used to display error messages.
     */
    public PrintWriter getErrorWriter();

    /**
     * @return the writer which is used to display warning messages.
     */
    public PrintWriter getWarningWriter();

    /**
     * Resets the internal state of the observer.
     */
    public void reset();

}
