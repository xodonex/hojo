# Properties for the Hojo application
# ------------------------------------

width = 20


sw.shell =      {0}Toggle whether the shell should be used. If not, then\n\
                   interactive input will be taken from the command line.

sw.batch =      {0}Toggle whether interactive input (command line or shell)\n\
                   should be disabled.

sw.sysOut =     {0}Toggle whether all error output should be written to\n\
                   System.out instead of System.err.

sw.swing =      {0}Toggle whether Swing (or AWT) will be used (this has\n\
                   no effect when using the default -shell:on).\n\
                   Setting -Swing:off will decrease the load time, but,\n\
                   due to a bug in Swing, will leave the VM running\n\
                   forever if Swing is subsequently started. You were warned.

sw.PM =         {0}Control whether the package manager should be used.\n\
                   Turning this off will reduce the startup time, but at the\n\
                   same time disable wildcard imports. The extended package\n\
                   manager further increases the startup time but also ensures\n\
                   that only valid, public classes are imported.

sw.resource =   {0}Use the given resource file to create the shell.

sw.help =       {0}Display this message and terminate the application.

sw.minimal =    {0}Turn off the package manager, shell and Swing option.

codeArg.name = <code>
codeArg.text = {0}Interpret the given Hojo code <code>.

fileArg.name = <file>
fileArg.text = {0}Interpret the contents of the given file <file>.

urlArg.name = <URL>
urlArg.text = {0}Interpret the contents of the given URL <URL>.


help = \n{0}\n\n\
Usage: Hojo [switches] [input] [arguments]\n\
\n\n\
The possible switches are:\n\n\
  {1}\n\
  {2}\n\
  {3}\n\
  {4}\n\
  {5}\n\
  {6}\n\
  {7}\n\
  {8}\n\
\n\n\
Input may be provided in any of the following formats:\n\n\
  {9}\n\
  {10}\n\
  {11}\n\n\
The input will interpreted in the order given at the command line, and\n\
before any interactive input is accepted.\n\n\
\n\
Additional command-line arguments will be passed to the information\n\
symbol #args before the interpretation starts. Note that the first\n\
backslash of such arguments will be removed; this is necessary in order\n\
to distinguish these arguments from the input descriptions or switches.