# Properties for the Hojo Shell
# -----------------------------

# General properties
title = Hojo Shell {0}.{1}
columns = 80
width = 0.4
height = 0.8
font.type = monospaced
font.size = 12
font.bold = false
font.italic = false

# file filters
filters = flt.hjo \n flt.ser
flt.hjo = Hojo script (*.hjo)\n .*\\.hjo
flt.ser = Serialized file (*.ser) \n .*\\.ser


# Splash properties
splash.delay = 0

# Menu properties
menu.font.type = dialog
menu.font.size = 11
menu.font.bold = true
menu.font.italic = false

# File menu
menu.file = File \n F

menu.file.include = Include script... \n I \n F2
menu.file.include.hint = Process the contents of a script file

menu.file.loadScript = Load script... \n L \n control L
menu.file.loadScript.hint = Load a script file into the editor

menu.file.saveScript = Save script... \n S \n control S
menu.file.saveScript.hint = Save the editor contents into a script file

menu.file.loadValue = Load value... \n O \n shift control L
menu.file.loadValue.hint = Load (deserialize) a value stored in a file

menu.file.saveValue = Save value... \n A \n shift control S
menu.file.saveValue.hint = Save (serialize) the last result value into a file

menu.file.saveVars = Save variables... \n V \n F3
menu.file.saveVars.hint = Save (serialize) a map view of the global variables \
into a file

menu.file.chdir = Change directory... \n D \n F4
menu.file.chdir.hint = Change the current directory

menu.file.quit = Quit \n Q \n alt Q
menu.file.quit.hint = Terminate the application


# Edit menu
menu.edit = Edit\n E

menu.edit.undo = Undo \n U \n control Z
menu.edit.undo.hint = Undo the last edit

menu.edit.redo = Redo \n R \n control Y
menu.edit.redo.hint = Redo the last undone edit

menu.edit.cut = Cut \n T \n shift DELETE
menu.edit.cut.hint = Cut the current selection to the clipboard

menu.edit.copy = Copy \n P \n control INSERT
menu.edit.copy.hint = Copy the current selection to the clipboard

menu.edit.paste = Cut \n T \n shift INSERT
menu.edit.paste.hint = Paste the contents of the clipboard

menu.edit.selectAll = Select all \n A \n control A
menu.edit.selectAll.hint = Select the entire contents of the editor

menu.edit.current = Current editor \n C \n ESCAPE
menu.edit.current.hint = Move focus the the currently active editor

menu.edit.next = Next editor \n N \n alt RIGHT
menu.edit.next.hint = Activate the editor following the active editor

menu.edit.prev = Previous editor \n P \n alt LEFT
menu.edit.prev.hint = Activate the editor preceding the active editor

menu.edit.size = Editor size... \n S \n
menu.edit.size.hint = Set the size (number of lines) of the editors


# Command menu
menu.command = Command \n C

menu.command.compile = Compile \n C \n F9
menu.command.compile.hint = Compile the contents of the current editor

menu.command.run = Run \n R \n F5
menu.command.run.hint = Compile the contents of the current editor and execute \
the resulting code.

menu.command.interrupt = Interrupt execution \n I \n PAUSE
menu.command.interrupt.hint = Attempt to stop the currently executing code

menu.command.showTranscript = Show transcript \n T \n alt 0
menu.command.showTranscript.hint = Resize the transcript to its maximal size

menu.command.showSplit = Show transcript and error log \n  \n alt 1
menu.command.showSplit.hint = Resize the transcript and error log to equal \
sizes

menu.command.showErrorLog = Show error log \n  \n alt 2
menu.command.showErrorLog.hint = Resize the error log to its maximal size

menu.command.clearTranscript = Clear transcript... \n L \n F6
menu.command.clearTranscript.hint = Clear the contents of the transcript

menu.command.resetSyntax = Reset syntax... \n S \n F11
menu.command.resetSyntax.hint = Restore the basic compiler syntax configuration

menu.command.removeVar = Remove variable... \n V \n shift F12
menu.command.removeVar.hint = Remove (undeclare) a global variable

menu.command.clearVars = Clear all variables... \n A \n F12
menu.command.clearVars.hint = Remove all global variables


# Options menu
menu.options = Options\n O

menu.options.strictTypes = Strict type check... \n T \n control alt T
menu.options.strictTypes.hint = Set the strictness of the compiler type check

menu.options.traceLevel = Error trace level... \n E \n control alt E
menu.options.traceLevel.hint = Determine whether the trace of an error should \
be displayed

menu.options.warnLevel = Warning level... \n W \n control alt W
menu.options.warnLevel.hint = Determine which warnings should be generated

menu.options.warnAsError = Treat warnings as errors... \n R \n control alt R
menu.options.warnAsError.hint = Determine whether a warning should prevent \
execution of a command

menu.options.showInput = Show input... \n I \n control alt I
menu.options.showInput.hint = Determine whether commands should be displayed

menu.options.showCode = Show code... \n C \n control alt C
menu.options.showCode.hint = Determine whether compiled code should be displayed

menu.options.showOutput = Show output... \n O \n control alt O
menu.options.showOutput.hint = Determine whether command results should be displayed

menu.options.showTypes = Show output type... \n Y \n control alt Y
menu.options.showTypes.hint = Determine whether the type of a command result \
should be displayed

menu.options.maxString = Output string limit... \n S \n control alt S
menu.options.maxString.hint = Limit which strings should be displayed

menu.options.maxElems = Output element limit... \n L \n control alt L
menu.options.maxElems.hint = Limit which arrays or collections should be displayed


# Help menu
menu.help = Help \n H

menu.help.langGuide = Language guide \n T \n F1
menu.help.langGuide.hint = Show the Hojo language guide

menu.help.priSyntax = Primary syntax \n S \n 
menu.help.priSyntax.hint = Show the syntax of the primary language

menu.help.metaSyntax = Meta syntax \n M \n 
menu.help.metaSyntax.hint = Show the syntax of the meta language

menu.help.customSyntax = Custom syntax \n C \n 
menu.help.customSyntax.hint = Show the user-defined extensions to the primary \
language syntax

menu.help.pragma = Pragma directives \n P \n
menu.help.pragma.hint = List the pragma directives which are recognized by this \
implementation

menu.help.license = License \n L \n 
menu.help.license.hint = Show the license agreement

menu.help.about = About Hojo \n A \n
menu.help.about.hint = Show version and copyright information


# Status bar properties
status.foreground = 0x000000
status.font.type = dialog
status.font.size = 11
status.font.bold = false
status.font.italic = false

# Status messages
status.ready = Ready
status.compile = Interpreting
status.execute = Executing
status.noProblem = No errors or warnings
status.singleError = 1 error
status.multiError = {0} errors
status.singleWarning = 1 warning
status.multiWarning = {0} warnings
status.summary = {0} and {1}


# Transcript output format
transcript.tooltip = Transcript window
transcript.dividerChar = 
transcript.dividerString = 

transcript.background = 

transcript.input.size = 12
transcript.input.color = 0x181818
transcript.input.italic = true
transcript.input.bold = false

transcript.output.size = 12
transcript.output.color = 0x2e2424
transcript.output.italic = false
transcript.output.bold = true

transcript.code.size = 11
transcript.code.color = 0x7f7f7f
transcript.code.italic = false
transcript.code.bold = false

transcript.result.size = 12
transcript.result.color = 0x000080
transcript.result.italic = false
transcript.result.bold = true

# Error log format
errors.tooltip = Error log
errors.warning.size = 
errors.warning.color = 0x0000a0
errors.warning.bold = false
errors.warning.italic = false
errors.error.size = 
errors.error.color = 0x800000
errors.error.bold = true
errors.error.italic = false

# Command line properties
cmdline.xeq = ENTER
cmdline.next = DOWN
cmdline.prev = UP
cmdline.history = control ENTER
cmdline.history.title = Command history
cmdline.history.size = 64
cmdline.tooltip = {0} = execute, {1}/{2} = next/previous, {3} = show history
cmdline.text = Command line

# Editor definitions
editor.count = 4
editor.rows = 5
editor.undoSize = 200
editor.tooltip = Scratch code buffer for primary language commands.
editor.text = Editor {0}


# Value description formats
legalvalue.text = Select a value: {0}
legalvalue.boolean = true or false
legalvalue.range = {0} through {1}
legalvalue.type = any value of type {0}

# Confirmation messages
confirm.clearTranscript = clear the transcript
confirm.resetSyntax = reset the syntax to its initial configuration
confirm.clearVars = clear all global variables
confirm.quit = terminate the application

# Other messages
msg.removeVar = Enter the name of the variable to be removed.

# Help messages for various help menu items
help.syntax.true = yes
help.syntax.false = no
help.syntax.range = {0} through {1}
help.syntax.width = 80
help.syntax.height = 25
help.syntax.columns = 5

help.syntax.primary = White space characters:\n\n{0}\n\n\n\
Word characters:\n\n{1}\n\n\n\
Single-line comment indicators:\n\n{2}\n\n\n\
Multiple-line comment parentheses:\n\n{3}\n\n\n\
Nested multiple-line comments:\n\n{4}\n\n\n\
\n\
Case-sensitive syntax:\n\n{5}\n\n\n\
Unicode escape sequences allowed:\n\n{6}\n\n\n\
Restricted identifier start characters:\n\n{7}\n\n\n\
\n\
Punctuators:\n\n{8}\n\n\n\
\n\
String, character and word quote chars:\n\n{9}\n\n\n\
Numeric postitive, negative, decimal point, exponent and hexadecimal indicators:\n\n{10}\n\n\n\
Number type suffixes:\n\n{11}\n\n\n\
\n\
Reserved words:\n\n{12}\n\n\n\
\n\
Core types:\n\n{13}\n\n\n\
Imported types:\n\n{14}\n\n\n\
Package prefixes:\n\n{15}\n\n\n\
\n\
Operators:\n\n{16}\n\n\n\
\n\
Standard constants (null, false, true, OS interface, standard library):\n\n{17}\n\n\n\
Other constants:\n\n{18}

help.syntax.meta = Meta-character:\n\n{0}\n\n\n\
Last-result alias:\n\n{1}\n\n\n\
Directives:\n\n{2}\n\n\n\
Information symbols:\n\n{3}

help.syntax.custom = Macros:\n\n{0}\n\n\n\
Type identifiers:\n\n{1}\n\n\n\
Package prefixes:\n\n{2}\n\n\n\
Operators:\n\n{3}\n\n\n\
Literals (constants):\n\n{4}

help.syntax.pragma = Name:        {0}\nType:        {1}\nDescription: {2}

loadScript = Replaces the contents of the editor given as the first argument\n\
 value (base 1) by the string given as the second argument value.

saveScript = Saves the contents of the editor given as the first argument\n\
 value (base 1) to the file given as the second argument value.
